package entity;import java.util.Queue;import java.util.concurrent.ArrayBlockingQueue;/** * StockLedger.java * A class for recording the purchase and sale of stocks, * and for computing the capital gain or loss. * * @author Frank M. Carrano * @version 2.0 */public class StockLedger {  private Queue<StockPurchase> ledger;  private static int MAX_SHARES = 10000;  public StockLedger() {    ledger = new ArrayBlockingQueue<StockPurchase>(MAX_SHARES);  }   /** Task: Records a stock purchase in the ledger.   *  @param sharesBought   the number of shares purchased   *  @param pricePerShare  the price per share */  public void buy(int sharesBought, double pricePerShare) {    for (; sharesBought > 0; sharesBought--) {      StockPurchase purchase = new StockPurchase(pricePerShare);      ledger.offer(purchase);    } // end for  }   /** Task: Removes from the ledger any shares that were sold   *        and computes the capital gain or loss.   *  @param sharesSold     the number of shares sold   *  @param pricePerShare  the price per share   *  @return the capital gain (loss) */  public double sell(int sharesSold, double pricePerShare) {    double saleAmount = sharesSold * pricePerShare;    double totalCost = 0;    while (sharesSold > 0) {      StockPurchase share = ledger.poll();      double shareCost = share.getCostPerShare();      totalCost = totalCost + shareCost;      sharesSold--;    } // end while    return saleAmount - totalCost; // gain or loss  } } 